{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1a95599f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from matplotlib import pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1ee8d8e5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Age</th>\n",
       "      <th>Income($)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Rob</td>\n",
       "      <td>27</td>\n",
       "      <td>70000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Michael</td>\n",
       "      <td>29</td>\n",
       "      <td>90000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Mohan</td>\n",
       "      <td>29</td>\n",
       "      <td>61000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Ismail</td>\n",
       "      <td>28</td>\n",
       "      <td>60000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Kory</td>\n",
       "      <td>42</td>\n",
       "      <td>150000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Name  Age  Income($)\n",
       "0      Rob   27      70000\n",
       "1  Michael   29      90000\n",
       "2    Mohan   29      61000\n",
       "3   Ismail   28      60000\n",
       "4     Kory   42     150000"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"C:/Users/lenevo/Desktop/PythonAI/Datasets/salary.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ba098899",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x21a9b810850>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df['Age'],df['Income($)'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "86ef1161",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=3)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KMeans</label><div class=\"sk-toggleable__content\"><pre>KMeans(n_clusters=3)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "KMeans(n_clusters=3)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "km = KMeans(n_clusters=3)\n",
    "km"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1b6dfcac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2, 2, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_predicted = km.fit_predict(df[['Age','Income($)']])\n",
    "y_predicted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5b5751a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Cluster'] = y_predicted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3dca4e52",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Age</th>\n",
       "      <th>Income($)</th>\n",
       "      <th>Cluster</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Rob</td>\n",
       "      <td>27</td>\n",
       "      <td>70000</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Michael</td>\n",
       "      <td>29</td>\n",
       "      <td>90000</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Mohan</td>\n",
       "      <td>29</td>\n",
       "      <td>61000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Ismail</td>\n",
       "      <td>28</td>\n",
       "      <td>60000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Kory</td>\n",
       "      <td>42</td>\n",
       "      <td>150000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Name  Age  Income($)  Cluster\n",
       "0      Rob   27      70000        2\n",
       "1  Michael   29      90000        2\n",
       "2    Mohan   29      61000        0\n",
       "3   Ismail   28      60000        0\n",
       "4     Kory   42     150000        1"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a03399f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x21aa09ff760>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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iIgIDR48WGvXrm10WwAAQPvWpMRqwIABmjNnjv7zP/9Tzz77rJ577jmfraFOnjypoUOH6vnnn6+1fuHChXruuee0dOlSFRQUqFOnTsrIyNCZM2esmMmTJ+uTTz5Rbm6u3n77bW3evFkPPvigVe92uzV69Gj16dNHhYWFWrRokZ5++mm99NJLVswHH3ygSZMmaerUqdq+fbvGjx+v8ePHa8+ePY1qCwAAaOdME/Tt27fOLTk5uSm7NJLMm2++ab2uqqoycXFxZtGiRVZZeXm5cTqdZvny5cYYY/bu3WskmY8++siKWbdunXE4HObw4cPGGGNeeOEF07VrV3P27FkrZtasWSYlJcV6fccdd5jMzEyf9qSmppqHHnqowW1pCJfLZSQZl8vV4PcAAAD/asz1u0l3rIqLi+vcPv/8c1sSvuLiYpWWlio9Pd0qi46OVmpqqvLz8yV5ZyfGxMRo+PDhVkx6ero6dOiggoICK+aWW25ReHi4FZORkaGioiJ98803VsyFn1MdU/05DWlLbc6ePSu32+2zAQCAtqtJidWFjDE1nhdoh9LSUkmqMUA+NjbWqistLVXPnj196kNDQ9WtWzefmNr2ceFn1BVzYf2l2lKb+fPnKzo62tqSkpIucdQAACCYNTmx+stf/qLBgwcrMjJSkZGRGjJkiP73f//XzrYFvTlz5sjlcllbSUmJv5sEAABaUJMWCP3Nb36juXPnavr06brpppskSe+//74efvhhff3115o5c2azGxYXFydJOnr0qOLj463yo0ePatiwYVZMWVmZz/sqKyt1/Phx6/1xcXE6evSoT0z160vFXFh/qbbUxul0yul0Nuh4AQBA8GvSHavf/e53evHFF/Xf//3fGjt2rMaOHauFCxfqhRdeaNSswPokJycrLi5OeXl5Vpnb7VZBQYHS0tIkSWlpaSovL1dhYaEVs379elVVVSk1NdWK2bx5s86fP2/F5ObmKiUlRV27drViLvyc6pjqz2lIWwAAAJo0K9DpdJr9+/fXKP/000+N0+ls8H4qKirM9u3bzfbt240k85vf/MZs377dfPnll8YYYxYsWGBiYmLM3/72N7Nr1y4zbtw4k5ycbE6fPm3tY8yYMebqq682BQUF5v333zf9+/c3kyZNsurLy8tNbGysueeee8yePXvMa6+9Zjp27Gj+8Ic/WDFbt241oaGh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eApgQCdWhYWFKisr0zXXXGOVeTwebd68Wb///e/17rvv6ty5cyovL/e5a3X06FHFxcVJkuLi4mrM3queNXhhzMUzCY8ePaqoqChFRkYqJCREISEhtcZU76MhKioqJIkuQQAAglBFRYWio6PrjQnoxGrUqFHavXu3T9m9996rgQMHatasWUpKSlJYWJjy8vI0YcIESVJRUZEOHjyotLQ0SVJaWpqeeeYZlZWVqWfPnpKk3NxcRUVF6corr7Ri1q5d6/M5ubm51j7Cw8N17bXXKi8vT+PHj5ckVVVVKS8vT9OnT2/w8SQkJKikpERdunSRw+Fo/AkJUm63W0lJSSopKbH14dPBiHPhxXnw4jx8i3PhxXnwCrTzYIxRRUWFEhISLhkb0IlVly5ddNVVV/mUderUSd27d7fKp06dqscff1zdunVTVFSUHn30UaWlpemGG26QJI0ePVpXXnml7rnnHi1cuFClpaX66U9/qmnTplnddA8//LB+//vf60c/+pHuu+8+rV+/XitWrNCaNWusz3388cc1ZcoUDR8+XNdff70WL16skydP6t57723w8XTo0EGJiYnNPS1BKyoqKiD+AwkEnAsvzoMX5+FbnAsvzoNXIJ2HS92pqhbQiVVD/Pa3v1WHDh00YcIEnT17VhkZGXrhhRes+pCQEL399tt65JFHlJaWpk6dOmnKlCn6+c9/bsUkJydrzZo1mjlzppYsWaLExET98Y9/VEZGhhVz55136v/+7/80b948lZaWatiwYXrnnXdqDGgHAADtl8M0ZCQW0Axut1vR0dFyuVwB838e/sK58OI8eHEevsW58OI8eAXzeQj45RYQ/JxOp5566imfGZLtFefCi/PgxXn4FufCi/PgFczngTtWAAAANuGOFQAAgE1IrAAAAGxCYgUAAGATEisAAACbkFihUebPn6/rrrtOXbp0Uc+ePTV+/HgVFRVZ9V988YUcDket28qVK+vc73/+53/WiB8zZkxrHFKTvPjiixoyZIi1eF1aWprWrVtn1Z85c0bTpk1T9+7d1blzZ02YMKHGI5EuZozRvHnzFB8fr8jISKWnp2v//v0tfSjNVt+5OH78uB599FGlpKQoMjJSvXv31mOPPSaXy1XvPoPt+yBd+jsxcuTIGsf08MMP17vPYPxO1Hce2svvQ20WLFggh8OhGTNmWGXt6XfiQhef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5+HgwYPmlltuMd26dTNOp9P069fPPPnkkzXWsWoL34lL/bdhTNv/fajLxYlVe/qduNiF56Kt/U44jDGm1W6PAQAAtGGMsQIAALAJiRUAAIBNSKwAAABsQmIFAABgExIrAAAAm5BYAQAA2ITECgAAwCYkVgAAADYhsQIAALAJiRUAXEJ+fr5CQkKUmZnp76YACHA80gYALuH+++9X586d9fLLL6uoqEgJCQn+bhKAAMUdKwCox4kTJ/T666/rkUceUWZmppYtW+ZT/9Zbb6l///6KiIjQbbfdpldeeUUOh0Pl5eVWzPvvv68RI0YoMjJSSUlJeuyxx3Ty5MnWPRAArYLECgDqsWLFCg0cOFApKSn6/ve/rz/96U+qvtFfXFysiRMnavz48dq5c6ceeugh/eQnP/F5/2effaYxY8ZowoQJ2rVrl15//XW9//77mj59uj8OB0ALoysQAOpx00036Y477lB2drYqKysVHx+vlStXauTIkZo9e7bWrFmj3bt3W/E//elP9cwzz+ibb75RTEyM7r//foWEhOgPf/iDFfP+++/r1ltv1cmTJxUREeGPwwLQQrhjBQB1KCoq0ocffqhJkyZJkkJDQ3XnnXfq5Zdftuqvu+46n/dcf/31Pq937typZcuWqXPnztaWkZGhqqoqFRcXt86BAGg1of5uAAAEqpdfflmVlZU+g9WNMXI6nfr973/foH2cOHFCDz30kB577LEadb1797atrQACA4kVANSisrJSf/nLX/Tss89q9OjRPnXjx4/X8uXLlZKSorVr1/rUffTRRz6vr7nmGu3du1f9+vVr8TYD8D/GWAFALVavXq0777xTZWVlio6O9qmbNWuW1q9frxUrViglJUUzZ87U1KlTtWPHDj3xxBM6dOiQysvLFR0drV27dumGG27Qfffdp/vvv1+dOnXS3r17lZub2+C7XgCCB2OsAKAWL7/8stLT02skVZI0YcIEbdu2TRUVFVq1apVycnI0ZMgQvfjii9asQKfTKUkaMmSINm3apE8//VQjRozQ1VdfrXnz5rEWFtBGcccKAGz0zDPPaOnSpSopKfF3UwD4AWOsAKAZXnjhBV133XXq3r27tm7dqkWLFrFGFdCOkVgBQDPs379fv/zlL3X8+HH17t1bTzzxhObMmePvZgHwE7oCAQAAbMLgdQAAAJuQWAEAANiExAoAAMAmJFYAAAA2IbECAACwCYkVAACATUisAAAAbEJiBQAAYJP/BziDIuLNaBA+AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df1 = df[df.Cluster==0]\n",
    "df2 = df[df.Cluster==1]\n",
    "df3 = df[df.Cluster==2]\n",
    "\n",
    "plt.scatter(df1['Age'],df1['Income($)'],color='green')\n",
    "plt.scatter(df2['Age'],df2['Income($)'],color='red')\n",
    "plt.scatter(df3['Age'],df3['Income($)'],color='blue')\n",
    "\n",
    "plt.xlabel(\"Age\")\n",
    "plt.ylabel(\"Income($)\")\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "ae5803cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Age</th>\n",
       "      <th>Income($)</th>\n",
       "      <th>Cluster</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Rob</td>\n",
       "      <td>0.058824</td>\n",
       "      <td>0.213675</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Michael</td>\n",
       "      <td>0.176471</td>\n",
       "      <td>0.384615</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Mohan</td>\n",
       "      <td>0.176471</td>\n",
       "      <td>0.136752</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Ismail</td>\n",
       "      <td>0.117647</td>\n",
       "      <td>0.128205</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Kory</td>\n",
       "      <td>0.941176</td>\n",
       "      <td>0.897436</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Name       Age  Income($)  Cluster\n",
       "0      Rob  0.058824   0.213675        2\n",
       "1  Michael  0.176471   0.384615        2\n",
       "2    Mohan  0.176471   0.136752        0\n",
       "3   Ismail  0.117647   0.128205        0\n",
       "4     Kory  0.941176   0.897436        1"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scalar = MinMaxScaler()\n",
    "\n",
    "scalar.fit(df[['Income($)']])\n",
    "df['Income($)'] = scalar.transform(df[['Income($)']])\n",
    "\n",
    "scalar.fit(df[['Age']])\n",
    "df['Age'] = scalar.transform(df[['Age']])\n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "695698af",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "km = KMeans(n_clusters=3)\n",
    "y_predicted = km.fit_predict(df[['Age','Income($)']])\n",
    "y_predicted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "921f6ff0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Age</th>\n",
       "      <th>Income($)</th>\n",
       "      <th>Cluster</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Rob</td>\n",
       "      <td>0.058824</td>\n",
       "      <td>0.213675</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Michael</td>\n",
       "      <td>0.176471</td>\n",
       "      <td>0.384615</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Mohan</td>\n",
       "      <td>0.176471</td>\n",
       "      <td>0.136752</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Ismail</td>\n",
       "      <td>0.117647</td>\n",
       "      <td>0.128205</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Kory</td>\n",
       "      <td>0.941176</td>\n",
       "      <td>0.897436</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Gautam</td>\n",
       "      <td>0.764706</td>\n",
       "      <td>0.940171</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>David</td>\n",
       "      <td>0.882353</td>\n",
       "      <td>0.982906</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Andrea</td>\n",
       "      <td>0.705882</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Brad</td>\n",
       "      <td>0.588235</td>\n",
       "      <td>0.948718</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Angelina</td>\n",
       "      <td>0.529412</td>\n",
       "      <td>0.726496</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Donald</td>\n",
       "      <td>0.647059</td>\n",
       "      <td>0.786325</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Tom</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Arnold</td>\n",
       "      <td>0.058824</td>\n",
       "      <td>0.025641</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Jared</td>\n",
       "      <td>0.117647</td>\n",
       "      <td>0.051282</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Stark</td>\n",
       "      <td>0.176471</td>\n",
       "      <td>0.038462</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Ranbir</td>\n",
       "      <td>0.352941</td>\n",
       "      <td>0.068376</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Dipika</td>\n",
       "      <td>0.823529</td>\n",
       "      <td>0.170940</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Priyanka</td>\n",
       "      <td>0.882353</td>\n",
       "      <td>0.153846</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Nick</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.162393</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Alia</td>\n",
       "      <td>0.764706</td>\n",
       "      <td>0.299145</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Sid</td>\n",
       "      <td>0.882353</td>\n",
       "      <td>0.316239</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Abdul</td>\n",
       "      <td>0.764706</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Name       Age  Income($)  Cluster\n",
       "0        Rob  0.058824   0.213675        1\n",
       "1    Michael  0.176471   0.384615        1\n",
       "2      Mohan  0.176471   0.136752        1\n",
       "3     Ismail  0.117647   0.128205        1\n",
       "4       Kory  0.941176   0.897436        0\n",
       "5     Gautam  0.764706   0.940171        0\n",
       "6      David  0.882353   0.982906        0\n",
       "7     Andrea  0.705882   1.000000        0\n",
       "8       Brad  0.588235   0.948718        0\n",
       "9   Angelina  0.529412   0.726496        0\n",
       "10    Donald  0.647059   0.786325        0\n",
       "11       Tom  0.000000   0.000000        1\n",
       "12    Arnold  0.058824   0.025641        1\n",
       "13     Jared  0.117647   0.051282        1\n",
       "14     Stark  0.176471   0.038462        1\n",
       "15    Ranbir  0.352941   0.068376        1\n",
       "16    Dipika  0.823529   0.170940        2\n",
       "17  Priyanka  0.882353   0.153846        2\n",
       "18      Nick  1.000000   0.162393        2\n",
       "19      Alia  0.764706   0.299145        2\n",
       "20       Sid  0.882353   0.316239        2\n",
       "21     Abdul  0.764706   0.111111        2"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Cluster'] = y_predicted\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "032b0123",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x21aa5b0f280>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df1 = df[df.Cluster==0]\n",
    "df2 = df[df.Cluster==1]\n",
    "df3 = df[df.Cluster==2]\n",
    "\n",
    "plt.scatter(df1['Age'],df1['Income($)'],color='green')\n",
    "plt.scatter(df2['Age'],df2['Income($)'],color='red')\n",
    "plt.scatter(df3['Age'],df3['Income($)'],color='blue')\n",
    "plt.scatter(km.cluster_centers_[:,0],km.cluster_centers_[:,1],color='purple',marker=\"*\")\n",
    "\n",
    "plt.xlabel(\"Age\")\n",
    "plt.ylabel(\"Income($)\")\n",
    "plt.legend(['Green','Red','Blue','Centeroids'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "34288548",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.72268908, 0.8974359 ],\n",
       "       [0.1372549 , 0.11633428],\n",
       "       [0.85294118, 0.2022792 ]])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "km.cluster_centers_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "c813cbcd",
   "metadata": {},
   "outputs": [],
   "source": [
    "k_range = range(1,10)\n",
    "sum_square_err = []\n",
    "for k in k_range:\n",
    "    km = KMeans(n_clusters=k)\n",
    "    km.fit(df[['Age','Income($)']])\n",
    "    sum_square_err.append(km.inertia_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "15a4e210",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[5.434011511988179,\n",
       " 2.091136388699078,\n",
       " 0.4750783498553096,\n",
       " 0.34910470944195654,\n",
       " 0.26640301246684156,\n",
       " 0.21055478995472496,\n",
       " 0.18275153026579993,\n",
       " 0.1397684499538816,\n",
       " 0.10383752586603562]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum_square_err"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "d35ef71b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x21aa5c09d20>"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.xlabel(\"K\")\n",
    "plt.ylabel(\"Sum of Square Error\")\n",
    "plt.plot(k_range,sum_square_err)\n",
    "plt.scatter(k_range,sum_square_err,color='green')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "98e9e148",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
